=content_for(:head) do
    %script{:type=>"text/javascript",:src=>"http://openlayers.org/api/2.10/OpenLayers.js"}
    %script{:type=>"text/javascript",:src=>"http://maps.google.com/maps/api/js?v=3.2&amp&sensor=false"}
    = javascript_include_tag "province"
    %script{:type => "text/javascript"}
        - unless @province.geom == nil
            bounds = new OpenLayers.Bounds();
            bounds.extend(new OpenLayers.LonLat(#{@province.geom.as_georuby.bounding_box.first.x},#{@province.geom.as_georuby.bounding_box.first.y}));
            bounds.extend(new OpenLayers.LonLat(#{@province.geom.as_georuby.bounding_box.second.x},#{@province.geom.as_georuby.bounding_box.second.y}));
        - else
            bounds = null;
        init_opts = {
        eno: #{@province.eno},
        bounds: bounds
        }
        $(document).ready(function(){initialize(init_opts);});
%p
    #map.smallmap
    - unless @province.province_status.overview == nil
        #overview
            %h2 Overview
            - paragraphs = @province.province_status.overview.split(/\.\s+(?=[A-Z])/)
            - paragraphs.each do |para|
                %p= para+"."
- content_for(:sidebar) do
    %p
        %h2= @province.entityid
        %table{:width=>"100%"}
            %tr
                %td Compiled by:
                %td= @province.province_status.interpreted_by
            %tr
                %td Status:
                %td= @province.province_status.status
            %tr
                %td Type:
                %td= @province.province_status.provtype.titleize
            %tr
                %td Subtype:
                %td= @province.province_status.provsubtype.titleize rescue nil
        %h3 Summary
        #summary
            =@province.province_status.summary
       
        
        %h3 Province relationships
        %table{:width=>"100%"}
            %tr
                %td Parent:
                %td= link_to @province.parent_province.entityid, @province.parent_province rescue "N/A"
            %tr
                %td Children:
                %td
                    - provinces=@province.provinces
                    = raw provinces.map{|province| link_to province.entityid, province}.to_sentence
            - unless @province.adjoining_provinces.empty?
                %tr
                    %td Adjoins
                    %td= raw @province.adjoining_provinces.map{|province| link_to province.entityid, province}.to_sentence
            - unless @province.overlying_provinces.empty?
                %tr
                    %td Overlays
                    %td= raw @province.overlying_provinces.map{|province| link_to province.entityid, province}.to_sentence
            - unless @province.underlying_provinces.empty?
                %tr
                    %td Underlies
                    %td= raw @province.underlying_provinces.map{|province| link_to province.entityid, province}.to_sentence
            - unless @province.intruding_provinces.empty?
                %tr
                    %td Intrudes
                    %td= raw @province.intruding_provinces.map{|province| link_to province.entityid, province}.to_sentence
            - unless @province.interfingering_provinces.empty?
                %tr
                    %td Interfingers
                    %td= raw @province.interfingering_provinces.map{|province| link_to province.entityid, province}.to_sentence
        -#%h3= link_to 'Deposits', province_deposits_path(@province)
        %h3 Deposits
        - deposits = @province.deposits
        - unless deposits.empty?
            %h4= link_to 'Associations', deposits_path(:province_id=>@province.id)
            %table{:width=>"100%"}
                %tr
                    %th Name
                    %th Commodities
                - deposits.each do |deposit|
                    %tr
                        %td= link_to deposit.name, deposit
                        %td= deposit.commodity_list.try(:commodids)
        - else
            %p
                %i This province has no deposits associated with it.
        - intersecting_deposits = Deposit.intersect(@province.id)
        - unless intersecting_deposits.empty?
            %h4 Intersections
            %table{:width=>"100%"}
                %tr
                    %th Name
                    %th Commodities
                - intersecting_deposits.each do |deposit|
                    - unless deposit.id.in?(deposits.pluck('a.entities.eno')) 
                        %tr
                            %td= link_to deposit.name, deposit
                            %td= deposit.commodity_list.try(:commodids)
        - else
            %p
                %i This province has no deposits intersecting with it.
- content_for(:controller_nav) do
    %p= render :partial => "provinces/links"
- content_for(:sidebar) do
    %h2 Download
    %p
        =link_to image_tag( 'kml64.png', :title => "Download KML", :alt => "Download KML"), url_for(params.merge(:format=>:kml))
- content_for(:title_bar) do
    ==Provinces: #{@province.name} (#{@province.eno})