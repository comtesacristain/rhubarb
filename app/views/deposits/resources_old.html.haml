%p
    - resource_types = {"EDR"=>"Economic","DMP"=>"Paramarginal","DMS"=>"Submarginal","IFR"=>"Inferred", "TOTAL"=>"Total"}
    -# type = []
    - type = params[:type]  #if  params[:type]
    -# resource = []
    - resource = params[:resource] # if  params[:resource]
    - commod = String.new
    - aliased_commodities = CommodityType.aliases
    - if aliased_commodities.include?(params[:commodity])
        - commod=aliased_commodities[params[:commodity]]
    - else
        - commod=params[:commodity].split if params[:commodity]
    - header_row_span = 1
    - unless commod[0] == "All"
        - if type.first
            - header_row_span += 1
        - if resource.first
            - header_row_span += 1
    %table
        %tr
            %th{:rowspan=>header_row_span} &nbsp;
            %th{:rowspan=>header_row_span} Name
            %th{:rowspan=>header_row_span} State
            %th{:rowspan=>header_row_span} Status
            %th{:rowspan=>header_row_span} Longitude
            %th{:rowspan=>header_row_span} Latitude
            %th{:rowspan=>header_row_span} Commodities
            - unless commod.first == "All"
                - i = 0
                - if type.first || resource.first
                    - while i < commod.length
                        - commodity_column_span = (type.length * resource.length) + type.length + 2
                        %th{:colspan=>commodity_column_span}= commod[i]
                        - i += 1
                    %tr
                        - type_column_span = type.length
                        - i = 0
                        - while i < commod.length
                            - j = 0
                            - while j < resource.length
                                %th{:colspan=>type_column_span}= resource_types[resource[j].upcase]
                                - j += 1
                            - if type.include?("ore")
                                %th{:rowspan=>2}="Ore Units"
                            - if type.include?("commodity")
                                %th{:rowspan=>2}="Commodity Units"
                            - if type.include?("grade")
                                %th{:rowspan=>2}="Grade Units"
                            %th{:rowspan=>2}="DATE"
                            %th{:rowspan=>2}="MATERIAL"
                            - i += 1
                    %tr
                        - i = 0
                        - while i < commod.length
                            - j = 0
                            - while j < resource.length
                                - k = 0
                                - while k < type.length
                                    %th= type[k].titleize
                                    - k += 1
                                - j += 1
                            - i += 1
        - for deposit in @deposits
            %tr
                %td= h deposit.eno
                %td=link_to deposit.entityid, deposit
                %td= h deposit.deposit_status.state
                %td= h deposit.deposit_status.operating_status.titleize
                %td.number= "%3.4f" % deposit.try(:longitude) if deposit.geom != nil
                %td.number= "%3.4f" % deposit.try(:latitude) if deposit.geom != nil
                %td= h deposit.commodity_list.try(:commodnames)
                - unless commod[0] == "All"
                    - i = 0
                    - if type.first || resource.first
                        - while i< commod.length
                            - resources = Resource.grade(commod[i], params[:year], {:eno=>deposit.eno})
                            - grade = IdentifiedResource.new
                            - grade.set_resources(resources)
                            - if resources.first
                                - if resource.include?("edr")
                                    - if type.include?("ore")
                                        %td.number= "%.3f" % (grade.edr_ore/grade.ore_factor)
                                    - if type.include?("commodity")
                                        %td.number= "%.3f" % (grade.edr_commodity/grade.commodity_factor)
                                    - if type.include?("grade")
                                        %td.number= "%3.2f" % (grade.edr_grade/grade.grade_factor)
                                - if resource.include?("dmp")
                                    - if type.include?("ore")
                                        %td.number= "%.3f" % (grade.dmp_ore/grade.ore_factor)
                                    - if type.include?("commodity")
                                        %td.number= "%.3f" % (grade.dmp_commodity/grade.commodity_factor)
                                    - if type.include?("grade")
                                        %td.number= "%3.2f" % (grade.dmp_grade/grade.grade_factor)
                                - if resource.include?("dms")
                                    - if type.include?("ore")
                                        %td.number= "%.3f" % (grade.dms_ore/grade.ore_factor)
                                    - if type.include?("commodity")
                                        %td.number= "%.3f" % (grade.dms_commodity/grade.commodity_factor)
                                    - if type.include?("grade")
                                        %td.number= "%3.2f" % (grade.dms_grade/grade.grade_factor)
                                - if resource.include?("ifr")
                                    - if type.include?("ore")
                                        %td.number= "%.3f" % (grade.ifr_ore/grade.ore_factor)
                                    - if type.include?("commodity")
                                        %td.number= "%.3f" % (grade.ifr_commodity/grade.commodity_factor)
                                    - if type.include?("grade")
                                        %td.number= "%3.2f" % (grade.ifr_grade/grade.grade_factor)
                                - if resource.include?("total")
                                    - if type.include?("ore")
                                        %td.number= "%.3f" % (grade.total_ore/grade.ore_factor)
                                    - if type.include?("commodity")
                                        %td.number= "%.3f" % (grade.total_commodity/grade.commodity_factor)
                                    - if type.include?("grade")
                                        %td.number= "%3.2f" % (grade.total_grade/grade.grade_factor)
                                - if type.include?("ore")
                                    %td= grade.ore_unit
                                - if type.include?("commodity")
                                    %td= grade.commodity_unit
                                - if type.include?("grade")
                                    %td= grade.grade_unit
                                %td= grade.recorddate
                                %td= grade.material
                            - else
                                - blank_cells_length = ((type.length * resource.length)+type.length + 2)
                                - cells = 0
                                - while cells < blank_cells_length
                                    %td &nbsp;
                                    - cells += 1
                            - i += 1
- content_for(:sidebar) do
    %p= render :partial => "deposits/query"
- content_for(:controller_nav) do
    %p= render :partial => "deposits/links"
- content_for(:sidebar_download) do
    %p= render :partial => "deposits/format"
- content_for(:title_bar) do
    ==Deposits: Economic Resources
    - unless params[:commodity].nil? || params[:commodity] == "All"
        == - #{params[:commodity].titleize}
%p= will_paginate @deposits
                