=stylesheet_link_tag 'aimr'
=javascript_tag :defer => 'defer' do
    - ajax_string = String.new
    - ajax_string = "/resources/identified.json?year=#{params[:year].to_s}"
    - ajax_string += "&state=#{params[:state]}" unless params[:state].blank?
    - ajax_string += "&status=#{params[:status]}" unless params[:status].blank?
    - aimr_commodities = CommodityType.aimr.keys.sort
    - i = 0
    - while i < aimr_commodities.length
    
        - if aimr_commodities[i] == "Mineral Sands"
            - mineral_sands = CommodityType.aliases[CommodityType.aimr[aimr_commodities[i]]]
            - j = 0
            
            - while j < mineral_sands.length
                - commodid = mineral_sands[j]
                == $.getJSON('#{ajax_string}&commodity=#{commodid}', null, function(data){
                == $('##{commodid.try(:downcase)}_unit').html(data.commodity_unit);
                == $('##{commodid.try(:downcase)}_reserves').html(Math.round(data.reserves.commodity*10)/10);
                == $('##{commodid.try(:downcase)}_edr').html(Math.round(data.edr.commodity*10)/10);
                == $('##{commodid.try(:downcase)}_dmp').html(Math.round(data.dmp.commodity*10)/10);
                == $('##{commodid.try(:downcase)}_dms').html(Math.round(data.dms.commodity*10)/10);
                == $('##{commodid.try(:downcase)}_ifr').html(Math.round(data.ifr.commodity*10)/10);
                == });
                - j += 1
        - elsif CommodityType.aliases["coal"].include?(CommodityType.aimr[aimr_commodities[i]])
            - commodid = CommodityType.aimr[aimr_commodities[i]]
            == $.getJSON('#{ajax_string}&commodity=#{commodid}&recoverability=insitu', null, function(data){
            == $('##{commodid.try(:downcase)}_insitu_unit').html(data.commodity_unit);
            == $('##{commodid.try(:downcase)}_insitu_edr').html(Math.round(data.edr.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_insitu_dmp').html(Math.round(data.dmp.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_insitu_dms').html(Math.round(data.dms.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_insitu_ifr').html(Math.round(data.ifr.commodity*10)/10);
            == })
            == $.getJSON('#{ajax_string}&commodity=#{commodid}&recoverability=recoverable', null, function(data){
            == $('##{commodid.try(:downcase)}_recoverable_unit').html(data.commodity_unit);
            == $('##{commodid.try(:downcase)}_recoverable_reserves').html(Math.round(data.reserves.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_recoverable_edr').html(Math.round(data.edr.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_recoverable_dmp').html(Math.round(data.dmp.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_recoverable_dms').html(Math.round(data.dms.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_recoverable_ifr').html(Math.round(data.ifr.commodity*10)/10);
            == })
        - elsif aimr_commodities[i] == "Diamond"
            - commodid = CommodityType.aimr[aimr_commodities[i]]
            == $.getJSON('#{ajax_string}&commodity=#{commodid}', null, function(data){
            == $('##{commodid.try(:downcase)}_gem_unit').html(data.commodity_unit);
            == $('##{commodid.try(:downcase)}_gem_reserves').html(Math.round(data.reserves.commodity*0.49*10)/10);
            == $('##{commodid.try(:downcase)}_gem_edr').html(Math.round(data.edr.commodity*0.49*10)/10);
            == $('##{commodid.try(:downcase)}_gem_dmp').html(Math.round(data.dmp.commodity*0.49*10)/10);
            == $('##{commodid.try(:downcase)}_gem_dms').html(Math.round(data.dms.commodity*0.49*10)/10);
            == $('##{commodid.try(:downcase)}_gem_ifr').html(Math.round(data.ifr.commodity*0.49*10)/10);
            == $('##{commodid.try(:downcase)}_industrial_unit').html(data.commodity_unit);
            == $('##{commodid.try(:downcase)}_industrial_reserves').html(Math.round(data.reserves.commodity*0.51*10)/10);
            == $('##{commodid.try(:downcase)}_industrial_edr').html(Math.round(data.edr.commodity*0.51*10)/10);
            == $('##{commodid.try(:downcase)}_industrial_dmp').html(Math.round(data.dmp.commodity*0.51*10)/10);
            == $('##{commodid.try(:downcase)}_industrial_dms').html(Math.round(data.dms.commodity*0.51*10)/10);
            == $('##{commodid.try(:downcase)}_industrial_ifr').html(Math.round(data.ifr.commodity*0.51*10)/10);
            })
        - else
            - commodid = CommodityType.aimr[aimr_commodities[i]]
            == $.getJSON('#{ajax_string}&commodity=#{commodid}', null, function(data){
            == $('##{commodid.try(:downcase)}_unit').html(data.commodity_unit);
            == $('##{commodid.try(:downcase)}_reserves').html(Math.round(data.reserves.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_edr').html(Math.round(data.edr.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_dmp').html(Math.round(data.dmp.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_dms').html(Math.round(data.dms.commodity*10)/10);
            == $('##{commodid.try(:downcase)}_ifr').html(Math.round(data.ifr.commodity*10)/10);
            == });
        - i += 1
%h1{:align=>:center}= aimr_title(params[:state],params[:year])
#aimr_link
    %a{:href=>"http://www.ga.gov.au/minerals/exploration/resources_advice/Table1_AIMR10.jsp"} Table 1 for AIMR 2010
%p
%table{:class=>:aimr}
    %tr
        %th{:rowspan=>4,:class=>:aimrLight} COMMODITY
        %th{:rowspan=>4,:class=>:aimrLight} UNITS
        %th{:colspan=>7,:class=>:aimrAustralia} AUSTRALIA
    %tr
        %th{:rowspan=>3,:class=>:aimrAEDR} JORC Reserves (% of AEDR)
        %th{:colspan=>3,:class=>:aimrEDR} Demonstrated Resources
        %th{:rowspan=>3,:class=>:aimrInferred} Inferred Resources
        %th{:rowspan=>3,:class=>:aimrAEDR} Accessible EDR (AEDR)
        %th{:rowspan=>3,:class=>:aimrMine}== Mine Pro-duction #{params[:year]}
    %tr
        %th{:rowspan=>2,:class=>:aimrEDR} Economic (EDR)
        %th{:colspan=>2,:class=>:aimrEDR} Subeconomic
    %tr
        %th{:class=>:aimrEDR} Para-marginal
        %th{:class=>:aimrEDR} Sub-marginal
    - aimr_commodities = CommodityType.aimr.keys.sort
    - i = 0
    - while i < aimr_commodities.length
        - if aimr_commodities[i]=="Mineral Sands"
            - link = false
            - cell_style="aimrPaleTop"
            - aimr_table_cells(Hash[aimr_commodities[i],nil], cell_style, link)
            - mineral_sands = CommodityType.aliases[CommodityType.aimr[aimr_commodities[i]]]
            - j = 0
            - while j < mineral_sands.length
                - link = true
                - commodity = CommodityType.find(mineral_sands[j]).commodname
                - if j == mineral_sands.length - 1
                    - cell_style="aimrPaleBottom"
                - else
                    - cell_style="aimrPale"
                - aimr_table_cells(Hash[commodity,mineral_sands[j]], cell_style, link)
                - j += 1
        - elsif CommodityType.aliases["coal"].include?(CommodityType.aimr[aimr_commodities[i]])
            - link = true
            - cell_style="aimrPaleTop"
            - aimr_table_cells(Hash[aimr_commodities[i],CommodityType.aimr[aimr_commodities[i]]], cell_style, link)
            - link = false
            - cell_style="aimrPale"
            - aimr_table_cells(Hash["In situ",CommodityType.aimr[aimr_commodities[i]]+"_insitu"], cell_style, link)
            - cell_style="aimrPaleBottom"
            - aimr_table_cells(Hash["Recoverable",CommodityType.aimr[aimr_commodities[i]]+"_recoverable"], cell_style, link)
        - elsif aimr_commodities[i]=="Diamond"
            - link = true
            - cell_style="aimrPaleTop"
            -aimr_table_cells(Hash[aimr_commodities[i],CommodityType.aimr[aimr_commodities[i]]], cell_style, link)
            - link = false
            - cell_style="aimrPale"
            - aimr_table_cells(Hash["Gem & near gem",CommodityType.aimr[aimr_commodities[i]]+"_gem"], cell_style, link)
            - cell_style="aimrPaleBottom"
            - aimr_table_cells(Hash["Industrial",CommodityType.aimr[aimr_commodities[i]]+"_industrial"], cell_style, link)
        - else
            - link = true
            - cell_style="aimrLight"
            - aimr_table_cells(Hash[aimr_commodities[i],CommodityType.aimr[aimr_commodities[i]]], cell_style, link)
        - i += 1
- content_for(:controller_nav) do
    %p= render :partial => "resources/links"
- content_for(:sidebar) do
    %p= render :partial => "resources/query"
- content_for(:title_bar) do
    ==Resources: Identified Mineral Resources