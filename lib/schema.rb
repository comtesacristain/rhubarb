$:.unshift(File.join(File.dirname(__FILE__), 'spatial_adapter', 'lib'))

require 'rubygems'
require 'pp'
require 'active_record'
require 'geo_ruby'

include GeoRuby::SimpleFeatures

# ============= Connect to oracle spatial database =============
db_config = YAML.load_file('database.yml')
ActiveRecord::Base.establish_connection(
  :adapter => 'oracle_enhanced',
  :database => db_config["database"], 
  :username => db_config["username"],
  :password => db_config["password"]
)
#ActiveRecord::Base.connection.disable_dbms_output
# ==============================================================


# add spatial support from georuby and common spatial adapter
# These should be added AFTER the AR connection is established otherwise you will get
# "uninitialized constant ActiveRecord::..." error 
require 'geo_ruby' 
require 'common_spatial_adapter'
#include SpatialAdapter

#module ActiveRecord
#  module ConnectionAdapters
#    class Column
#      alias :original_type_cast :type_cast
#      def type_cast(value)
#        return nil if value.nil?
#        if self.sql_type == "SDO_GEOMETRY" 
#          puts "type_cast #{value}"
#          original_type_cast(value)
#          # do nothing .. TODO: check
#        else
#          original_type_cast(value)                
#        end
#      end
#    end
#  end
#end

#ActiveRecord::ConnectionAdapters::OracleEnhancedColumn.class_eval do
#  include SpatialAdapter
#  alias :orgi
#end

GeoRuby::SimpleFeatures::Point.class_eval do
  def as_sdo_geometry
    "MDSYS.SDO_GEOMETRY(#{sdo_gtype},#{sdo_srid},SDO_POINT_TYPE(#{sdo_ordinate_array}),NULL,NULL)"     
#    'MDSYS.SDO_GEOMETRY(3001,8311,SDO_POINT_TYPE(-28.35433333,112.87205,1847),NULL,NULL)' 
  end
  
  # dl01 see http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14255/sdo_objrelschema.htm#g1013735
  def sdo_gtype    
    d = @with_z ? 3 : 2
    l = @with_m ? (d==2 ? 3 : 4) : 0
    "#{d}#{l}01".to_i
  end
  
  def sdo_ordinate_array
    @with_z ? "#{@x},#{@y},#{@z}" : "#{@x},#{@y}"
  end
  
  def sdo_srid
    @srid == 4326 ? 8311 : @srid
  end
  
end


ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.class_eval do
  include SpatialAdapter

  alias :original_native_database_types :native_database_types
  def native_database_types
    original_native_database_types.merge!(geometry_data_types)
  end
#  
  alias :original_quote :quote
  #Redefines the quote method to add behaviour for when a Geometry is encountered
  def quote(value, column = nil)
    if value.kind_of?(GeoRuby::SimpleFeatures::Geometry)
      if value.class == GeoRuby::SimpleFeatures::Point
        puts column.class
#        value = value.as_sdo_geometry
#        original_quote(value,column)
#        original_quote("#{value.as_sdo_geometry}",column)
        value.as_sdo_geometry
      end
#      "'#{value.as_hex_ewkb}'"
    else
      original_quote(value,column)
    end
  end  
end

#module ActiveRecord
#  module ConnectionAdapters
#    class OracleSpatialColumn < Column

#      include SpatialColumn
              
      #Transforms a string to a geometry. PostGIS returns a HewEWKB string.
#      def self.string_to_geometry(string)
#        return string unless string.is_a?(String)
#        GeoRuby::SimpleFeatures::Geometry.from_hex_ewkb(string) rescue nil
#      end
      
#      def self.create_simplified(name,default,null = true)
#        new(name,default,"geometry",null,nil,nil,nil)
#      end

#    end
#  end
#end


class Sample < ActiveRecord::Base
  set_sequence_name :autogenerated 
  set_primary_key :sampleno
# set_sequence_name 'SEQ_SAMPLES_SAMPLENO'
# set_sequence_name :autogenerated 
end

#ss = Sample.all(:conditions => ["sampleid LIKE ?", "GA2476/009GR001%"])
#ss[0].update_attribute("geom", 
#    "MDSYS.SDO_GEOMETRY(
#        3002,  -- 3-dimensional line (2) 
#        NULL,
#        NULL,
#        MDSYS.SDO_ELEM_INFO_ARRAY(1,2,1), -- one line (2 = linestring) whose vertices are connected by straight line segments
#        MDSYS.SDO_ORDINATE_ARRAY(-28.49685  112.80091 901 -28.49625 112.80116 952) -- 2 points 
#        )")
